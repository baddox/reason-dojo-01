// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';

var List = require("bsb-native/lib/js/list.js");
var $$Array = require("bsb-native/lib/js/array.js");
var Random = require("bsb-native/lib/js/random.js");
var Reprocessing = require("/Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/lib/js/src/Reprocessing.js");
var Reprocessing_Env = require("/Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/lib/js/src/Reprocessing_Env.js");
var Reprocessing_Draw = require("/Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/lib/js/src/Reprocessing_Draw.js");
var Reprocessing_Utils = require("/Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/lib/js/src/Reprocessing_Utils.js");
var Reprocessing_Constants = require("/Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/lib/js/src/Reprocessing_Constants.js");

var sizef = 600;

function makeInitialState(param) {
  var asteroids = $$Array.init(10, (function (param) {
          return /* record */[
                  /* pos : tuple */[
                    Random.$$float(sizef),
                    Random.$$float(sizef)
                  ],
                  /* vel : tuple */[
                    Random.$$float(2.0) - 1.0,
                    Random.$$float(2.0) - 1.0
                  ],
                  /* angle */0
                ];
        }));
  return /* record */[
          /* player : record */[
            /* pos : tuple */[
              sizef / 2.0,
              sizef / 2.0
            ],
            /* vel : tuple */[
              0.0,
              0.0
            ],
            /* angle */-Reprocessing_Constants.half_pi
          ],
          /* asteroids */$$Array.to_list(asteroids),
          /* bullets : [] */0
        ];
}

function setup(env) {
  Reprocessing_Env.size(600, 600, env);
  return makeInitialState(/* () */0);
}

function drawPlayer(player, env) {
  var match = player[/* pos */0];
  Reprocessing_Draw.pushMatrix(env);
  Reprocessing_Draw.translate(match[0], match[1], env);
  Reprocessing_Draw.rotate(player[/* angle */2], env);
  Reprocessing_Draw.trianglef(/* tuple */[
        0.0,
        0.0
      ], /* tuple */[
        -20.0,
        5.0
      ], /* tuple */[
        -20.0,
        -5.0
      ], env);
  return Reprocessing_Draw.popMatrix(env);
}

function drawAsteroid(asteroid, env) {
  var match = asteroid[/* pos */0];
  Reprocessing_Draw.pushMatrix(env);
  Reprocessing_Draw.translate(match[0], match[1], env);
  Reprocessing_Draw.ellipsef(/* tuple */[
        0.0,
        0.0
      ], 20.0, 20.0, env);
  return Reprocessing_Draw.popMatrix(env);
}

function drawBullet(bullet, env) {
  var match = bullet[/* pos */0];
  Reprocessing_Draw.pushMatrix(env);
  Reprocessing_Draw.translate(match[0], match[1], env);
  Reprocessing_Draw.ellipsef(/* tuple */[
        0.0,
        0.0
      ], 1, 1, env);
  return Reprocessing_Draw.popMatrix(env);
}

function collidesWith(a, b) {
  var distance = Reprocessing_Utils.distf(a[/* pos */0], b[/* pos */0]);
  return distance < 20.0;
}

function directionVector(angle) {
  return /* tuple */[
          0.1 * Math.cos(angle),
          0.1 * Math.sin(angle)
        ];
}

function onRight(player, env) {
  if (Reprocessing_Env.key(/* Right */51, env)) {
    return /* record */[
            /* pos */player[/* pos */0],
            /* vel */player[/* vel */1],
            /* angle */player[/* angle */2] + 0.1
          ];
  } else {
    return player;
  }
}

function onLeft(player, env) {
  if (Reprocessing_Env.key(/* Left */52, env)) {
    return /* record */[
            /* pos */player[/* pos */0],
            /* vel */player[/* vel */1],
            /* angle */player[/* angle */2] - 0.1
          ];
  } else {
    return player;
  }
}

function onUp(player, env) {
  if (Reprocessing_Env.key(/* Up */54, env)) {
    var match = directionVector(player[/* angle */2]);
    var match$1 = player[/* vel */1];
    return /* record */[
            /* pos */player[/* pos */0],
            /* vel : tuple */[
              match$1[0] + match[0],
              match$1[1] + match[1]
            ],
            /* angle */player[/* angle */2]
          ];
  } else {
    return player;
  }
}

function scaleVec(param, by) {
  return /* tuple */[
          by * param[0],
          by * param[1]
        ];
}

function onSpace(player, env) {
  if (Reprocessing_Env.key(/* Space */4, env)) {
    return /* record */[
            /* pos */player[/* pos */0],
            /* vel */scaleVec(directionVector(player[/* angle */2]), 20),
            /* angle */0
          ];
  }
  
}

function wrap(x) {
  var match = x > sizef;
  if (match) {
    return 0;
  } else {
    var match$1 = x < 0;
    if (match$1) {
      return sizef;
    } else {
      return x;
    }
  }
}

function wrap$1(param) {
  return /* tuple */[
          wrap(param[0]),
          wrap(param[1])
        ];
}

function updatePos(body) {
  var match = body[/* pos */0];
  var match$1 = body[/* vel */1];
  return /* record */[
          /* pos */wrap$1(/* tuple */[
                match[0] + match$1[0],
                match[1] + match$1[1]
              ]),
          /* vel */body[/* vel */1],
          /* angle */body[/* angle */2]
        ];
}

function updateBullets(state, env) {
  var match = onSpace(state[/* player */0], env);
  var bullets = match !== undefined ? /* :: */[
      match,
      state[/* bullets */2]
    ] : state[/* bullets */2];
  var bullets$1 = List.map(updatePos, bullets);
  return /* record */[
          /* player */state[/* player */0],
          /* asteroids */state[/* asteroids */1],
          /* bullets */bullets$1
        ];
}

function draw(state, env) {
  Reprocessing_Draw.background(Reprocessing_Constants.black, env);
  Reprocessing_Draw.noFill(env);
  Reprocessing_Draw.stroke(Reprocessing_Constants.white, env);
  Reprocessing_Draw.strokeWeight(1, env);
  var player = state[/* player */0];
  drawPlayer(player, env);
  List.iter((function (asteroid) {
          return drawAsteroid(asteroid, env);
        }), state[/* asteroids */1]);
  List.iter((function (b) {
          return drawBullet(b, env);
        }), state[/* bullets */2]);
  var asteroids = List.map(updatePos, state[/* asteroids */1]);
  var player$1 = onRight(player, env);
  var player$2 = onLeft(player$1, env);
  var player$3 = onUp(player$2, env);
  var player$4 = updatePos(player$3);
  var state$1 = updateBullets(state, env);
  var asteroids$1 = List.filter((function (a) {
            return !List.exists((function (param) {
                          return collidesWith(a, param);
                        }), state$1[/* bullets */2]);
          }))(asteroids);
  if (List.exists((function (param) {
            return collidesWith(player$4, param);
          }), asteroids$1)) {
    return makeInitialState(/* () */0);
  } else {
    return /* record */[
            /* player */player$4,
            /* asteroids */asteroids$1,
            /* bullets */state$1[/* bullets */2]
          ];
  }
}

Reprocessing.run(setup, undefined, draw, undefined, undefined, (function (param, env) {
        return makeInitialState(/* () */0);
      }), undefined, undefined, undefined, undefined, /* () */0);

var size = 600;

var asteroidRadius = 20.0;

exports.size = size;
exports.sizef = sizef;
exports.makeInitialState = makeInitialState;
exports.setup = setup;
exports.drawPlayer = drawPlayer;
exports.asteroidRadius = asteroidRadius;
exports.drawAsteroid = drawAsteroid;
exports.drawBullet = drawBullet;
exports.collidesWith = collidesWith;
exports.directionVector = directionVector;
exports.onRight = onRight;
exports.onLeft = onLeft;
exports.onUp = onUp;
exports.scaleVec = scaleVec;
exports.onSpace = onSpace;
exports.wrap = wrap$1;
exports.updatePos = updatePos;
exports.updateBullets = updateBullets;
exports.draw = draw;
/*  Not a pure module */
