Hello - from /Users/shaddox/.vscode/extensions/jaredly.reason-vscode-1.5.2/bin.native
Previous log location: /var/folders/cp/8_fldht54sngtxln_zpgn7yr0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","languageId":"reason","version":1,"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}}}
üì£ üì£ NEW BSB PACKAGE üì£ üì£
- location: /Users/shaddox/work/reason-dojo-01/reprocessing-example
- bsPlatform: /Users/shaddox/work/node_modules/bs-platform
- buildSystem: bsb-native version 4.0.6 targetting js
- build command: /Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe -make-world -backend js
>> Build system running: /Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe -make-world -backend js
>>> stdout

>>> stderr
/Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe: unknown option '-backend'.
Usage : bsb.exe <bsb-options> -- <ninja_options>
For ninja options, try ninja -h 
ninja will be loaded either by just running `bsb.exe' or `bsb.exe .. -- ..`
It is always recommended to run ninja via bsb.exe 
Bsb options are:
  -v  Print version and exit
  -version  Print version and exit
  -verbose  Set the output(from bsb) to be verbose
  -w  Watch mode
  -clean-world  Clean all bs dependencies
  -clean  Clean only current project
  -make-world  Build all dependencies and itself 
  -init  Init sample project to get started. Note (`bsb -init sample` will create a sample project while `bsb -init .` will reuse current directory)
  -theme  The theme for project initialization, default is basic(https://github.com/bucklescript/bucklescript/tree/master/jscomp/bsb/templates)
  -regen  (internal) Always regenerate build.ninja no matter bsconfig.json is changed or not (for debugging purpose)
  -query  (internal)Query metadata about the build
  -themes  List all available themes
  -where  Show where bsb.exe is located
  -help  Display this list of options
  --help  Display this list of options
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/bsconfig.json", "diagnostics": []}}
Deps reprocessing
Dep loc /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/reprocessing/bsconfig.json
Skipping nonexistent dependency: reprocessing
Got source directories src
Source directories: /Users/shaddox/work/reason-dojo-01/reprocessing-example/src
Source files found: /Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re : /Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
-- All local modules found: 2
IndexHot
impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src/IndexHot.cmt
Index
impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src/index.cmt
Dependency dirs /Users/shaddox/work/node_modules/bs-platform/lib/ocaml
Getting hte ppxs yall
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
<< Making lastDefinitions with type error for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
Sending response {"id": 1, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":11,"character":15},"end":{"line":11,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 6, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 7, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 8, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":3},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\n\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 9, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":4},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nl\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":17,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Opens folkz > 1 Reprocessing
Package opens Pervasives
Package opens Pervasives
FINDING /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
resolving open Reprocessing.place holder
Not local
No path for module Reprocessing
Could not get module Reprocessing
Opens nows 1 file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 11, "jsonrpc": "2.0", "result": [{"label": "lor", "kind": 12, "detail": "(int, int) => int", "documentation": "Bitwise logical or.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:281"}, {"label": "lsr", "kind": 12, "detail": "(int, int) => int", "documentation": "`n lsr m` shifts `n` to the right by `m` bits. This is a logical shift: zeroes are inserted regardless of the sign of `n`. The result is unspecified if `m < 0` or `m >= bitsize`.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:296"}, {"label": "lsl", "kind": 12, "detail": "(int, int) => int", "documentation": "`n lsl m` shifts `n` to the left by `m` bits. The result is unspecified if `m < 0` or `m >= bitsize`, where `bitsize` is `32` on a 32-bit platform and `64` on a 64-bit platform.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:290"}, {"label": "log10", "kind": 12, "detail": "float => float", "documentation": "Base 10 logarithm.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:354"}, {"label": "lxor", "kind": 12, "detail": "(int, int) => int", "documentation": "Bitwise logical exclusive or.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:284"}, {"label": "land", "kind": 12, "detail": "(int, int) => int", "documentation": "Bitwise logical and.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:278"}, {"label": "log1p", "kind": 12, "detail": "float => float", "documentation": "`log1p x` computes `log(1.0 +. x)` \\(natural logarithm\\), giving numerically-accurate results even if `x` is close to `0.0`.\n\nSince: 3.12.0\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:363"}, {"label": "lnot", "kind": 12, "detail": "int => int", "documentation": "Bitwise logical negation.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:287"}, {"label": "ldexp", "kind": 12, "detail": "(float, int) => float", "documentation": "`ldexp x n` returns `x *. 2 ** n`.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:446"}, {"label": "log", "kind": 12, "detail": "float => float", "documentation": "Natural logarithm.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:351"}]}
Read message 
{"jsonrpc":"2.0","id":12,"method":"completionItem/resolve","params":{"label":"land","detail":"(int, int) => int","documentation":"Bitwise logical and.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:278","insertTextFormat":1,"kind":12}}
[server] Got a method completionItem/resolve
[server] processing took 0.00691413879395ms
Sending response {"id": 12, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":6},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 13, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":3},"end":{"line":17,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 14, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 16, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 19, "character": 0}, "end": {"line": 19, "character": 3}}, "message": "Error: 1687: <syntax error>", "severity": 1}, {"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":3},"end":{"line":17,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 17, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":7},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet \n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 19, "character": 0}, "end": {"line": 19, "character": 3}}, "message": "Error: 1687: <syntax error>", "severity": 1}, {"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":12},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo =\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 18, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":9},"end":{"line":17,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 19, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 20, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 21, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 19, "character": 0}, "end": {"line": 19, "character": 3}}, "message": "Error: 1737: <syntax error>", "severity": 1}, {"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":9},"end":{"line":17,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":14},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = b\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":17,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00476837158203ms
Opens folkz > 1 Reprocessing
Package opens Pervasives
Package opens Pervasives
FINDING /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
resolving open Reprocessing.place holder
Not local
No path for module Reprocessing
Could not get module Reprocessing
Opens nows 1 file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 23, "jsonrpc": "2.0", "result": [{"label": "bool_of_string", "kind": 12, "detail": "string => bool", "documentation": "Convert the given string to a boolean. Raise `Invalid_argument \"bool_of_string\"` if the string is not `\"true\"` or `\"false\"`.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:566"}]}
Read message 
{"jsonrpc":"2.0","id":24,"method":"completionItem/resolve","params":{"label":"bool_of_string","detail":"string => bool","documentation":"Convert the given string to a boolean. Raise `Invalid_argument \"bool_of_string\"` if the string is not `\"true\"` or `\"false\"`.\n\n\n\nfile:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli:566","insertTextFormat":1,"kind":12}}
[server] Got a method completionItem/resolve
[server] processing took 0.00619888305664ms
Sending response {"id": 24, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":16},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":17,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Opens folkz > 1 Reprocessing
Package opens Pervasives
Package opens Pervasives
FINDING /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
resolving open Reprocessing.place holder
Not local
No path for module Reprocessing
Could not get module Reprocessing
Opens nows 1 file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/shaddox/work/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 25, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 26, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":13},"end":{"line":17,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 27, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 28, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":18},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar =\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 29, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 31, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":19},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar =>\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 32, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":16},"end":{"line":17,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 34, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 35, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 19, "character": 0}, "end": {"line": 19, "character": 3}}, "message": "Error: 1205: <syntax error>", "severity": 1}, {"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":20},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => \n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 36, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":21},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {}\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":22},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  \n}\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 38, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 39, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 40, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":23},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5\n}\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 41, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":18,"character":3},"end":{"line":18,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 42, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 43, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 44, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":24},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n}\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 46, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 47, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 48, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":19,"character":1},"end":{"line":19,"character":1}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 49, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":25},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n};\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 50, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 51, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 52, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 53, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0300407409668ms
Sending response {"id": 54, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 177, "character": 0}}, "newText": "open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => 5;\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":26},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => 5;\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":26}}}
>> Build system running: /Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe -make-world -backend js
>>> stdout

>>> stderr
/Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe: unknown option '-backend'.
Usage : bsb.exe <bsb-options> -- <ninja_options>
For ninja options, try ninja -h 
ninja will be loaded either by just running `bsb.exe' or `bsb.exe .. -- ..`
It is always recommended to run ninja via bsb.exe 
Bsb options are:
  -v  Print version and exit
  -version  Print version and exit
  -verbose  Set the output(from bsb) to be verbose
  -w  Watch mode
  -clean-world  Clean all bs dependencies
  -clean  Clean only current project
  -make-world  Build all dependencies and itself 
  -init  Init sample project to get started. Note (`bsb -init sample` will create a sample project while `bsb -init .` will reuse current directory)
  -theme  The theme for project initialization, default is basic(https://github.com/bucklescript/bucklescript/tree/master/jscomp/bsb/templates)
  -regen  (internal) Always regenerate build.ninja no matter bsconfig.json is changed or not (for debugging purpose)
  -query  (internal)Query metadata about the build
  -themes  List all available themes
  -where  Show where bsb.exe is located
  -help  Display this list of options
  --help  Display this list of options
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/IndexHot.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
<< Making lastDefinitions with type error for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re
type error here File "", line 1, characters 0-22:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 22}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 55, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":19},"end":{"line":17,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 56, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 57, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 58, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":27},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n};\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 59, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 60, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 62, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":29},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n};  \n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 63, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 64, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 65, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0121593475342ms
Sending response {"id": 66, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 177, "character": 0}}, "newText": "open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => 5;\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":30},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => 5;\n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":30}}}
>> Build system running: /Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe -make-world -backend js
>>> stdout

>>> stderr
/Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe: unknown option '-backend'.
Usage : bsb.exe <bsb-options> -- <ninja_options>
For ninja options, try ninja -h 
ninja will be loaded either by just running `bsb.exe' or `bsb.exe .. -- ..`
It is always recommended to run ninja via bsb.exe 
Bsb options are:
  -v  Print version and exit
  -version  Print version and exit
  -verbose  Set the output(from bsb) to be verbose
  -w  Watch mode
  -clean-world  Clean all bs dependencies
  -clean  Clean only current project
  -make-world  Build all dependencies and itself 
  -init  Init sample project to get started. Note (`bsb -init sample` will create a sample project while `bsb -init .` will reuse current directory)
  -theme  The theme for project initialization, default is basic(https://github.com/bucklescript/bucklescript/tree/master/jscomp/bsb/templates)
  -regen  (internal) Always regenerate build.ninja no matter bsconfig.json is changed or not (for debugging purpose)
  -query  (internal)Query metadata about the build
  -themes  List all available themes
  -where  Show where bsb.exe is located
  -help  Display this list of options
  --help  Display this list of options
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/IndexHot.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
type error here File "", line 1, characters 0-22:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 22}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 67, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":19},"end":{"line":17,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 68, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 69, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 70, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 71, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 72, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 73, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00977516174316ms
Sending response {"id": 74, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":17,"character":19},"end":{"line":17,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 75, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":31},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n};  \n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
Sending response {"id": 76, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 77, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 78, "jsonrpc": "2.0", "result": []}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":31},"contentChanges":[{"text":"open Reprocessing;\n\nlet size = 600;\nlet sizef = float(size);\n\ntype bodyT = {\n  pos: (float, float),\n  vel: (float, float),\n  angle: float,\n};\n\ntype stateT = {\n  player: bodyT,\n  asteroids: list(bodyT),\n  bullets: list(bodyT),\n};\n\nlet foo = bar => {\n  5;\n};  \n\nlet makeInitialState = () => {\n  let asteroids =\n    Array.init(10, _ =>\n      {\n        pos: (Random.float(sizef), Random.float(sizef)),\n        vel: (Random.float(2.0) -. 1.0, Random.float(2.0) -. 1.0),\n        angle: 0.,\n      }\n    );\n  {\n    player: {\n      pos: (sizef /. 2.0, sizef /. 2.0),\n      vel: (0.0, 0.0),\n      angle: -. Constants.half_pi,\n    },\n    asteroids: Array.to_list(asteroids),\n    bullets: [],\n  };\n};\n\nlet setup = env => {\n  Env.size(~width=size, ~height=size, env);\n  makeInitialState();\n};\n\nlet drawPlayer = (player, env) => {\n  let (x, y) = player.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.rotate(player.angle, env);\n  Draw.trianglef(\n    ~p1=(0.0, 0.0),\n    ~p2=((-20.0), 5.0),\n    ~p3=((-20.0), (-5.0)),\n    env,\n  );\n  Draw.popMatrix(env);\n};\n\nlet asteroidRadius = 20.0;\n\nlet drawAsteroid = (asteroid, env) => {\n  let (x, y) = asteroid.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(\n    ~center=(0.0, 0.0),\n    ~radx=asteroidRadius,\n    ~rady=asteroidRadius,\n    env,\n  );\n\n  Draw.popMatrix(env);\n};\n\nlet drawBullet = (bullet, env) => {\n  let (x, y) = bullet.pos;\n  Draw.pushMatrix(env);\n  Draw.translate(~x, ~y, env);\n  Draw.ellipsef(~center=(0.0, 0.0), ~radx=1., ~rady=1., env);\n  Draw.popMatrix(env);\n};\n\nlet collidesWith = (a, b) => {\n  let distance = Utils.distf(~p1=a.pos, ~p2=b.pos);\n  distance < asteroidRadius;\n};\n\nlet directionVector = angle => {\n  let scale = 0.1;\n  (scale *. cos(angle), scale *. sin(angle));\n};\n\nlet onRight = (player, env) =>\n  if (Env.key(Right, env)) {\n    {...player, angle: player.angle +. 0.1};\n  } else {\n    player;\n  };\n\nlet onLeft = (player, env) =>\n  if (Env.key(Left, env)) {\n    {...player, angle: player.angle -. 0.1};\n  } else {\n    player;\n  };\n\nlet onUp = (player, env) =>\n  if (Env.key(Up, env)) {\n    {...player, angle: player.angle -. 0.1};\n    let (dx, dy) = directionVector(player.angle);\n    let (x, y) = player.vel;\n    {...player, vel: (x +. dx, y +. dy)};\n  } else {\n    player;\n  };\n\nlet scaleVec = ((x, y), ~by) => (by *. x, by *. y);\n\nlet onSpace = (player, env): option(bodyT) =>\n  if (Env.key(Space, env)) {\n    Some({\n      pos: player.pos,\n      vel: scaleVec(directionVector(player.angle), ~by=20.),\n      angle: 0.,\n    });\n  } else {\n    None;\n  };\n\nlet wrap = x => x > sizef ? 0. : x < 0. ? sizef : x;\nlet wrap = ((x, y)) => (wrap(x), wrap(y));\n\nlet updatePos = body => {\n  let (x, y) = body.pos;\n  let (dx, dy) = body.vel;\n  {...body, pos: (x +. dx, y +. dy) |> wrap};\n};\n\nlet updateBullets = (state, env) => {\n  let bullets =\n    switch (onSpace(state.player, env)) {\n    | None => state.bullets\n    | Some(bullet) => [bullet, ...state.bullets]\n    };\n  let bullets = bullets |> List.map(updatePos);\n  {...state, bullets};\n};\n\nlet draw = (state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.noFill(env);\n  Draw.stroke(Constants.white, env);\n  Draw.strokeWeight(1, env);\n  let player = state.player;\n  drawPlayer(player, env);\n  state.asteroids |> List.iter(asteroid => drawAsteroid(asteroid, env));\n  state.bullets |> List.iter(b => drawBullet(b, env));\n  let asteroids = state.asteroids |> List.map(updatePos);\n  let player = onRight(player, env);\n  let player = onLeft(player, env);\n  let player = onUp(player, env);\n  let player = updatePos(player);\n  let state = updateBullets(state, env);\n  let asteroids =\n    asteroids\n    |> List.filter(a => !(state.bullets |> List.exists(collidesWith(a))));\n  if (asteroids |> List.exists(collidesWith(player))) {\n    makeInitialState();\n  } else {\n    {...state, player, asteroids};\n  };\n};\n\nrun(~setup, ~draw, ~mouseDown=(_, env) => makeInitialState(), ());"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re","version":31}}}
>> Build system running: /Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe -make-world -backend js
>>> stdout

>>> stderr
/Users/shaddox/work/node_modules/bs-platform/lib/bsb.exe: unknown option '-backend'.
Usage : bsb.exe <bsb-options> -- <ninja_options>
For ninja options, try ninja -h 
ninja will be loaded either by just running `bsb.exe' or `bsb.exe .. -- ..`
It is always recommended to run ninja via bsb.exe 
Bsb options are:
  -v  Print version and exit
  -version  Print version and exit
  -verbose  Set the output(from bsb) to be verbose
  -w  Watch mode
  -clean-world  Clean all bs dependencies
  -clean  Clean only current project
  -make-world  Build all dependencies and itself 
  -init  Init sample project to get started. Note (`bsb -init sample` will create a sample project while `bsb -init .` will reuse current directory)
  -theme  The theme for project initialization, default is basic(https://github.com/bucklescript/bucklescript/tree/master/jscomp/bsb/templates)
  -regen  (internal) Always regenerate build.ninja no matter bsconfig.json is changed or not (for debugging purpose)
  -query  (internal)Query metadata about the build
  -themes  List all available themes
  -where  Show where bsb.exe is located
  -help  Display this list of options
  --help  Display this list of options
Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/IndexHot.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
type error here File "", line 1, characters 0-22:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 22}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re
‚û°Ô∏è running bsc /Users/shaddox/work/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/shaddox/work/reason-dojo-01/reprocessing-example/lib/bs/js/src' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -I '/Users/shaddox/work/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -w -30-40+6+7+27+32..39+44+45+101 -ppx /Users/shaddox/work/node_modules/bs-platform/lib/bsppx.exe -bs-re-out -impl /Users/shaddox/work/reason-dojo-01/reprocessing-example/node_modules/.lsp/Index.ast with pwd /Users/shaddox/work/reason-dojo-01/reprocessing-example
type error here File "", line 1, characters 5-17:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 5}, "end": {"line": 0, "character": 17}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":0,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0541210174561ms
Sending response {"id": 79, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re","languageId":"reason","version":1,"text":"Reprocessing.hotreload(\"src/index.re\");\n"}}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":22}},"message":"Error: Unbound module Reprocessing","severity":1}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 80, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 81, "jsonrpc": "2.0", "result": []}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0340938568115ms
Sending response {"id": 82, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Sending response {"id": 83, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Running diagnostics for file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re
type error here File "", line 1, characters 0-22:
Error: Unbound module Reprocessing
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/IndexHot.re", "diagnostics": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 22}}, "message": "Error: Unbound module Reprocessing", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 84, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 85, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 86, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":0,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 87, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":0,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 88, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":3,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 89, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":0,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 90, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Sending response {"id": 91, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/src/index.re"},"position":{"line":12,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0979900360107ms
Sending response {"id": 92, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/shaddox/work/reason-dojo-01/reprocessing-example/bsconfig.json","type":3}]}}
Got a watched file change
